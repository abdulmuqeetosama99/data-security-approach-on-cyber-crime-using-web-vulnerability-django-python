import operator
import re
from heapq import nlargest

from django.db.models.query import QuerySet
from django.shortcuts import render, redirect, get_object_or_404

# Create your views here.
from email_admin.models import SpamModel
from user.forms import RegisterForms
from user.models import RegisterModel, SendmailModel, FeedbackModel

def handler404(request):
    return render(request, '404.html', status=404)
    
def handler500(request):
    return render(request, '404.html', status=500)

def index(request):
    if request.method=="POST":
        usid=request.POST.get('username')
        pswd = request.POST.get('password')
        try:
            check = RegisterModel.objects.get(userid=usid,password=pswd)
            request.session['userid']=check.id
            return redirect('index')
        except:
            pass
    return render(request,'user/index.html')


def register(request):
    if request.method=="POST":
        forms=RegisterForms(request.POST)
        if forms.is_valid():
            forms.save()
            return redirect('index')
    else:
        forms=RegisterForms()
    return render(request,'user/register.html',{'form':forms})


def userpage(request):
    uid = request.session['userid']
    request_obj = RegisterModel.objects.get(id=uid)
    spam_objs = SpamModel.objects.all()
    se=''
    pos = []
    neg=[]
    oth =[]
    mm=''
    sa=''
    ro=0
    cat=''
    ss=''
    cos=[]
    sos=[]
    tos=[]
    vos=[]

    edcount, bcount, scount, fcount, acount, ecount, hcount,ocount = 0, 0, 0, 0, 0, 0, 0,0
    edw, bw, sw, fw, aw, ew, hw,oth = [], [], [], [], [], [], [],[]
    if request.method=="POST":
        to1=request.POST.get('to')
        sub = request.POST.get('subject')
        cht = request.POST.get('chat')
        to_mail = request_obj.email
        c = (re.findall(r"[\w']+", str(cht)))
        for f in c:
            for obj in spam_objs:
                if f == obj.spam_list:
                    if obj.spam_category == 'war':
                        pos.append(f)
                    elif obj.spam_category == 'Weapon':
                        neg.append(f)
                    elif obj.spam_category == 'Violence':
                        cos.append(f)
                    elif obj.spam_category == 'Threat':
                        sos.append(f)
                    elif obj.spam_category == 'Crime':
                        tos.append(f)
                    elif obj.spam_category == 'trafficking':
                        vos.append(f)


        if len(pos)>len(neg) and len(pos)>len(cos) and len(pos)>len(sos) and len(pos)>len(tos) and len(pos)>len(vos):
            cat="war"
        elif len(neg)>len(pos) and len(neg)>len(cos) and len(neg)>len(sos) and len(neg)>len(tos) and len(neg)>len(vos):
            cat="Weapon"
        elif len(cos)>len(pos) and len(cos)>len(neg) and len(cos)>len(sos) and len(cos)>len(tos) and len(cos)>len(vos):
            cat="Violence"
        elif len(sos)>len(pos) and len(sos)>len(neg) and len(sos)>len(cos) and len(sos)>len(tos) and len(sos)>len(vos):
            cat="Threat"
        elif len(tos)>len(pos) and len(tos) > len(neg) and len(tos) > len(cos) and len(tos) > len(sos) and len(tos) > len(vos):
            cat = "Crime"
        elif len(vos)>len(pos) and len(vos) > len(neg) and len(vos) > len(cos) and len(vos) > len(sos) and len(vos) > len(tos):
            cat = "trafficking"
        else:
            cat="other"
        ss=len(pos)

    if (cat=="other"):
        sa='inbox'
    else:
        sa='spam'
    if request.method=="POST":
        to1=request.POST.get('to')
        sub = request.POST.get('subject')
        cht = request.POST.get('chat')
        to_mail = request_obj.email
        SendmailModel.objects.create(sendermail=to_mail, to=to1, subject=sub, chat=cht, spam=sa, category=cat)
    return render(request,'user/userpage.html',{'obj':ss,'a':cat,'ji':sa,})


def viewmailpage(request):
    uid = request.session['userid']
    request_obj = RegisterModel.objects.get(id=uid)
    to_mail = request_obj.email
    obj=SendmailModel.objects.filter(to=to_mail,spam='inbox')
    return render(request,'user/viewmailpage.html',{'form':obj})


def spampage(request):
    uid = request.session['userid']
    request_obj = RegisterModel.objects.get(id=uid)
    to_mail = request_obj.email
    obj = SendmailModel.objects.filter(to=to_mail, spam='spam')
    return render(request,'user/spampage.html',{'objects':obj})

def logout(request):
    request.session['userid']= None
    return redirect('index')


def deleteobj(request,pk):
    obj = get_object_or_404(SendmailModel, pk=pk)
    obj.delete()
    return redirect('viewmailpage')

def spamdeleteobj(request,pk):
    obj = get_object_or_404(SendmailModel, pk=pk)
    obj.delete()
    return redirect('spampage')

def mydetails(request):
    usid=request.session['userid']
    us_id=RegisterModel.objects.get(id=usid)
    return render(request,'user/mydetails.html',{'obje':us_id})


def updatemydetails(request):
    userid = request.session['userid']
    objec = RegisterModel.objects.get(id=userid)
    if request.method == "POST":
        FirstName = request.POST.get('FirstName', '')
        LastName = request.POST.get('LastName', '')
        UserId = request.POST.get('UserId', '')
        Password = request.POST.get('Password', '')
        MobileNumber = request.POST.get('MobileNumber', '')
        EmailId = request.POST.get('EmailId', '')
        Gender = request.POST.get('Gender', '')

        obj = get_object_or_404(RegisterModel, id=userid)
        obj.firstname = FirstName
        obj.lastname = LastName
        obj.userid = UserId
        obj.password = Password
        obj.mblenum = MobileNumber
        obj.email = EmailId
        obj.gender = Gender

        obj.save(update_fields=["firstname", "lastname", "userid", "password", "mblenum", "email",
                                "gender", ])
        return redirect('mydetails')

    return render(request,'user/updatemydetails.html',{'obj': objec})

def feedback(request):
    uid = request.session['userid']
    objec = RegisterModel.objects.get(id=uid)
    if request.method == "POST":
        feed = request.POST.get('feedback')
        FeedbackModel.objects.create(username=objec, feedback=feed)
    return render(request,'user/feedback.html')
